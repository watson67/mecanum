#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
import sys
import termios
import tty
import select

# Configuration des touches pour un clavier AZERTY avec mouvements diagonaux
key_mapping = {
    'z': (1, 0, 0, 0),    # Avancer
    's': (-1, 0, 0, 0),   # Reculer
    'q': (0, 1, 0, 0),    # Translation gauche
    'd': (0, -1, 0, 0),   # Translation droite
    'a': (0, 0, 0, 1),    # Rotation gauche
    'e': (0, 0, 0, -1),   # Rotation droite
    ' ': (0, 0, 0, 0)     # Stop
}

def get_key():
    """Lit l'entrée clavier en mode non bloquant pour détecter plusieurs touches en simultané."""
    tty.setraw(sys.stdin.fileno())
    dr, _, _ = select.select([sys.stdin], [], [], 0.1)  # Timeout pour éviter le blocage
    if dr:
        keys = sys.stdin.read(10)  # Lire plusieurs touches en même temps
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
        return keys
    else:
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
        return ""

class TeleopMecanum(Node):
    def __init__(self, topic_name):
        super().__init__('teleop_mecanum')
        self.publisher = self.create_publisher(Twist, topic_name, 10)
        self.get_logger().info(f'Teleop Mecanum prêt. Publie sur {topic_name}')

    def run(self):
        try:
            while rclpy.ok():
                keys = get_key()
                if '\x03' in keys:  # CTRL+C pour quitter
                    break
                
                twist = Twist()
                x, y, th = 0.0, 0.0, 0.0

                # Vérifier toutes les touches pressées simultanément
                for key in keys:
                    if key in key_mapping:
                        dx, dy, _, dth = key_mapping[key]
                        x += dx
                        y += dy
                        th += dth

                # Appliquer les vitesses avec un facteur de mise à l'échelle
                twist.linear.x = x * 0.5
                twist.linear.y = y * 0.5
                twist.angular.z = th * 1.0

                self.publisher.publish(twist)
        except Exception as e:
            self.get_logger().error(f'Erreur: {e}')

def main(args=None):
    global settings
    settings = termios.tcgetattr(sys.stdin)  # Sauvegarde des paramètres du terminal
    
    rclpy.init()
    topic = sys.argv[1] if len(sys.argv) > 1 else '/cmd_vel'
    node = TeleopMecanum(topic)
    
    try:
        node.run()
    finally:
        node.destroy_node()
        rclpy.shutdown()
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)  

if __name__ == '__main__':
    main()
