#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import PoseStamped
from rclpy.qos import QoSProfile, ReliabilityPolicy, DurabilityPolicy, HistoryPolicy

# Noms des robots dans l'essaim
ROBOT_NAMES = ["Aramis", "Athos", "Porthos"]

# Sujets ROS pour les poses des robots
POSE_TOPICS = [f"/vrpn_mocap/{name}/pose" for name in ROBOT_NAMES]

class PoseMonitor(Node):
    def __init__(self):
        super().__init__('consensus_swarm')

        # Configuration QoS
        self.qos_profile = QoSProfile(
            depth=10,
            reliability=ReliabilityPolicy.BEST_EFFORT,
            durability=DurabilityPolicy.VOLATILE,
            history=HistoryPolicy.KEEP_LAST
        )
        
        # Stockage des données des robots
        self.positions = {name: None for name in ROBOT_NAMES}
        self.last_received = {name: None for name in ROBOT_NAMES}
        self.message_counts = {name: 0 for name in ROBOT_NAMES}
        self.position_displayed = {name: False for name in ROBOT_NAMES}

        # Abonnements aux sujets des poses des robots (version optimisée)
        for name, topic in zip(ROBOT_NAMES, POSE_TOPICS):
            self.create_subscription(
                PoseStamped,
                topic,
                self.make_pose_callback(name),
                qos_profile=self.qos_profile
            )

        # Logs lors de l'initialisation
        self.get_logger().info(f"Subscribed to topics: {POSE_TOPICS}")

    # Fonction pour les callbacks de pose
    def make_pose_callback(self, name):
        def callback(msg):
            if not isinstance(msg, PoseStamped):
                self.get_logger().error(f"Received invalid message type for {name}: {type(msg)}")
                return
            
            self.message_counts[name] += 1
            x = msg.pose.position.x
            y = msg.pose.position.y
            self.positions[name] = (x, y)
            self.last_received[name] = self.get_clock().now()
            
            # Affiche la position seulement la première fois
            if not self.position_displayed[name]:
                self.get_logger().info(f"Initial position for {name}: x={x:.3f}, y={y:.3f}")
                self.position_displayed[name] = True
                
                # Vérifier si on a reçu la position de tous les robots
                if all(self.position_displayed.values()):
                    self.get_logger().info("Received initial positions for all robots.")
        return callback

# Point d'entrée principal du script
def main(args=None):
    rclpy.init(args=args)
    node = PoseMonitor()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
